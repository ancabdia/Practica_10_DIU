/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package es.ulpgc.dis.practica10;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Andres
 */
public class main extends javax.swing.JFrame {

    FileNameExtensionFilter filtro = null;
    DefaultListModel model = new DefaultListModel();
    String originalFolder;
    String selectFile;
    long contentSize;
    ArrayList<String> files;
    HashMap<String, String> map = new HashMap<>();
    int[] index;
    int j, x = 0;
    private Tarea tarea = null;

//<Clase de datos a devolver, entero para barra de progreso >
    private class Tarea extends SwingWorker<Void, Void> {

        ZipOutputStream out;
        private boolean flag = false;

        @Override
        protected Void doInBackground() throws Exception {

            try {
                int progressValue = 0;

// Objeto para referenciar a los archivos que queremos comprimir
                BufferedInputStream origin = null;
// Objeto para referenciar el archivo zip de salida                
                FileOutputStream dest = new FileOutputStream(selectFile);
                out = new ZipOutputStream(new BufferedOutputStream(dest));

// Buffer de transferencia para almacenar datos a comprimir
                byte[] data = new byte[1024];

                Iterator i = files.iterator();
                while (i.hasNext() && !flag) {
                    
                    //tarea.execute();
                    String filename = (String) i.next();
                    System.out.println("fichero: " + filename.substring(filename.lastIndexOf('/') + 1));
                    FileInputStream fi = new FileInputStream(filename);
                    origin = new BufferedInputStream(fi, 1024);
                    ZipEntry entry = new ZipEntry(filename.substring(filename.lastIndexOf('/') + 1));

                    out.putNextEntry(entry);
// Leemos datos desde el archivo origen y se env√≠an al archivo destino
                    int count;

                    while ((count = origin.read(data, 0, 1024)) != -1) {
                        out.write(data, 0, count);
                    }

// Cerramos el archivo origen, ya enviado a comprimir
                    origin.close();
                    progressValue++;
                    jProgressBar1.setValue((progressValue * 100) / files.size());
                    //Thread.sleep(100);

                }
// Cerramos el archivo zip
                System.out.println("Compresion terminada");
                out.close();
            } catch (Exception e) {
                e.printStackTrace();
            }

            return null;
        }

        @Override
        public void done() {
            aceptButton.setEnabled(true);
            flag = true;
            System.out.println("Tarea terminada");
        }

    }

    /**
     * Creates new form main
     */
    public main() {
        initComponents();

        list.setModel(model);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        workDialog = new javax.swing.JDialog();
        jProgressBar1 = new javax.swing.JProgressBar();
        information = new javax.swing.JLabel();
        aceptButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        list = new javax.swing.JList<>();
        fileInfo = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenu = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        exitMenu = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        compressMenu = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        informationOption = new javax.swing.JMenuItem();

        workDialog.setTitle("Compressing");

        information.setText("Creating zip file: ");

        aceptButton.setText("Acept");
        aceptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aceptButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        workDialog.setSize(new java.awt.Dimension(300, 150));

        javax.swing.GroupLayout workDialogLayout = new javax.swing.GroupLayout(workDialog.getContentPane());
        workDialog.getContentPane().setLayout(workDialogLayout);
        workDialogLayout.setHorizontalGroup(
            workDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(workDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(workDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(workDialogLayout.createSequentialGroup()
                        .addComponent(information)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(workDialogLayout.createSequentialGroup()
                        .addGroup(workDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, workDialogLayout.createSequentialGroup()
                                .addComponent(aceptButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(cancelButton))
                            .addComponent(jProgressBar1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        workDialogLayout.setVerticalGroup(
            workDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(workDialogLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(information)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(workDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cancelButton)
                    .addGroup(workDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(aceptButton)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jProgressBar1.setStringPainted(true);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jScrollPane1.setViewportView(list);

        fileInfo.setText("Select the files you would like to compress");

        fileMenu.setText("File");

        openMenu.setText("Open");
        openMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuActionPerformed(evt);
            }
        });
        fileMenu.add(openMenu);
        fileMenu.add(jSeparator1);

        exitMenu.setText("Exit");
        exitMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenu);

        jMenuBar1.add(fileMenu);

        editMenu.setText("Edit");

        compressMenu.setText("Compress");
        compressMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                compressMenuActionPerformed(evt);
            }
        });
        editMenu.add(compressMenu);

        jMenuBar1.add(editMenu);

        helpMenu.setText("Help");

        informationOption.setText("Information");
        informationOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                informationOptionActionPerformed(evt);
            }
        });
        helpMenu.add(informationOption);

        jMenuBar1.add(helpMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(fileInfo)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 266, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(131, 131, 131)
                .addComponent(fileInfo)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        fileInfo.setVisible(false);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void openMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuActionPerformed
        // TODO add your handling code here:
        model.removeAllElements();

        JFileChooser fc = new JFileChooser();
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        fc.setAcceptAllFileFilterUsed(false);

        int res = fc.showOpenDialog(null);
        if (res == JFileChooser.APPROVE_OPTION) {
            File fichero = fc.getSelectedFile();
            originalFolder = fichero.getName();
            for (File contenido : fichero.listFiles()) {
                if (contenido.isFile()) {
                    model.addElement(contenido.getName());
                    map.put(contenido.getName(), contenido.getAbsoluteFile().toString());
                }
            }

            fileInfo.setVisible(true);
            pack();

            list.addListSelectionListener(new ListSelectionListener() {
                @Override
                public void valueChanged(ListSelectionEvent e) {
                    boolean flag = e.getValueIsAdjusting();

                    index = list.getSelectedIndices();
                    j = 0;

                    if (index.length > 0 && flag) {
                        files = new ArrayList<>();
                        while (j < index.length) {
                            String name = list.getModel().getElementAt(index[j]);
                            for (HashMap.Entry<String, String> entry : map.entrySet()) {
                                if (name.equals(entry.getKey())) {
                                    System.out.println(entry.getValue());
                                    files.add(entry.getValue());
                                }
                            }
                            j++;
                        }
                    }
                }

            });
        }
    }//GEN-LAST:event_openMenuActionPerformed

    private void compressMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_compressMenuActionPerformed
        // TODO add your handling code here:
        tarea = new Tarea();
        JFileChooser fc = new JFileChooser();

        fc.setDialogTitle("Compress");
        fc.setSelectedFile(new File(originalFolder));

        int res = fc.showOpenDialog(null);
        if (res == JFileChooser.APPROVE_OPTION) {
            selectFile = fc.getSelectedFile().getAbsoluteFile() + ".zip";
            workDialog.setVisible(true);
            workDialog.setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));
            tarea.execute();
            aceptButton.setEnabled(false);
            cancelButton.setEnabled(true);
        }
    }//GEN-LAST:event_compressMenuActionPerformed

    private void aceptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aceptButtonActionPerformed
        // TODO add your handling code here:
        workDialog.setVisible(false);
    }//GEN-LAST:event_aceptButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        // TODO add your handling code here:
        tarea.cancel(true);
        information.setText("Tarea cancelada por el Usuario");
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void exitMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuActionPerformed
        // TODO add your handling code here:
        if (JOptionPane.showConfirmDialog(rootPane, "Would you like to close the app?", "Close application", JOptionPane.YES_NO_OPTION) == 0)
            System.exit(0);
    }//GEN-LAST:event_exitMenuActionPerformed

    private void informationOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_informationOptionActionPerformed
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(rootPane,
                "This app allows to compress files from a directory"
                + "\nHow to use it:\n"
                + "\t 1- Using the menu Open (Alt+O) for selectin the directory where you want to work."
                + "\n \n"
                + "\t 2- Select from the list above, the files you would like to compress."
                + "\n \n"
                + "\t 3- For compressing your files you would have to Edit and select the option in the submenu, and select where you would like to compress the files."
                + "\n \t\t\t\t\t The file will compress by default on .zip format"
                + "\n \n"
                + "\t 4- You can exit the program by using the menu Open (Alt+O) and the option Exit (ESC)."
                + "\n \n"
                + "\t You can view more info. on the link: " + "https://github.com/ancabdia/Practica_10_DIU.git",
                "Help information", JOptionPane.INFORMATION_MESSAGE
        );
    }//GEN-LAST:event_informationOptionActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton aceptButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JMenuItem compressMenu;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem exitMenu;
    private javax.swing.JLabel fileInfo;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JLabel information;
    private javax.swing.JMenuItem informationOption;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JList<String> list;
    private javax.swing.JMenuItem openMenu;
    private javax.swing.JDialog workDialog;
    // End of variables declaration//GEN-END:variables
}
